{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundry","state","hasError","error","info","this","setState","Component","App","onSearchChange","event","target","value","fetch","then","response","json","users","filteredRobots","filter","robot","toLocaleLowerCase","includes","length","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"kOAgBeA,EAdF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MAErB,OACQ,yBAAKC,UAAU,oDACX,yBAAKC,IAAI,SAASC,IAAG,+BAA0BL,GAA1B,OAA+BC,EAA/B,cACrB,6BAEI,gCAAMA,GACN,+BAAMC,MCqBXI,EA5BE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OAUf,OACI,6BAEQA,EAAOC,KAAI,SAACC,EAAKC,GACb,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAKT,GACVA,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,aCPzBU,EAbG,SAAC,GAAgC,EAA/BC,YAAgC,IAAnBC,EAAkB,EAAlBA,aAC7B,OACI,yBAAKX,UAAU,OACX,2BACIA,UAAU,mCACVY,KAAK,SACLC,YAAY,gBACZC,SAAUH,MCGXI,G,MAVA,SAACC,GACZ,OACI,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAChEJ,EAAMK,YC4BJC,E,kDA9BX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IAEDO,MAAQ,CACTC,UAAU,GAJA,E,8DASAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAIG,KAAKJ,MAAMC,SACJ,0DAGAG,KAAKX,MAAMK,a,GAnBHQ,aCqDZC,E,kDA5CX,aAAc,IAAD,8BACT,gBAgBJC,eAAiB,SAACC,GACd,EAAKJ,SAAS,CAAClB,YAAasB,EAAMC,OAAOC,SAhBzC,EAAKX,MAAQ,CACTnB,OAAQ,GACRM,YAAa,IAJR,E,gEAQO,IAAD,OACfyB,MAAM,8CACLC,MAAK,SAAAC,GACF,OAAOA,EAASC,UAEnBF,MAAK,SAAAG,GAAK,OAAI,EAAKX,SAAS,CAACxB,OAAQmC,S,+BAQjC,IAAD,EAC0BZ,KAAKJ,MAA5BnB,EADH,EACGA,OAAQM,EADX,EACWA,YACT8B,EAAiBpC,EAAOqC,QAAO,SAAAC,GACjC,OAAOA,EAAM5C,KAAK6C,oBAAoBC,SAASlC,EAAYiC,wBAE/D,OAAsB,IAAlBvC,EAAOyC,OACA,sDAGH,yBAAK7C,UAAU,MACX,wBAAIA,UAAU,MAAd,cACA,kBAAC,EAAD,CAAWW,aAAcgB,KAAKI,iBAC9B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACI,kBAAC,EAAD,CAAU3B,OAAQoC,W,GArC5BX,aCGEiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCRNC,IAASC,OACP,kBAAC,EAAD,MAEAC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrB,MAAK,SAAAsB,GACJA,EAAaC,gBAEdC,OAAM,SAAAnC,GACLoC,QAAQpC,MAAMA,EAAMqC,a","file":"static/js/main.5437dc55.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({id, name, email}) => {\n//    const {id, name, email} = props;\n    return(\n            <div className=\"bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\n                <img alt='robots' src={`https://robohash.org/${id}${name}?150x150`} />\n                <div>\n                    \n                    <h2> {name}</h2>\n                    <p > {email}</p>\n                </div>\n            </div>   \n    );\n}\n\nexport default Card;\n\n","import React from 'react';\nimport Card from './Card';\n\nconst CardList = ({robots}) => {\n    // const cardsArray = robots.map((user,i) => {\n    //     return (\n    //         <Card \n    //             key={robots[i].id} \n    //             id={robots[i].id} \n    //             name={robots[i].name} \n    //             email={robots[i].email} \n    //         />)\n    // })\n    return (\n        <div>\n            {\n                robots.map((user,i) => {\n                    return (\n                        <Card \n                            key={user.id} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email} \n                        />)\n                })\n            }\n\n        </div>\n    )\n}\n\nexport default CardList;\n","import React from 'react';\n\nconst SearchBox = ({searchfield, searchChange}) => {\n    return (\n        <div className='pa2'>\n            <input\n                className='pa3 ba b--green bg-lightest-blue' \n                type='search' \n                placeholder='search robots'\n                onChange={searchChange} \n            />\n        </div>    \n    );\n}\n\nexport default SearchBox;\n","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid white', height: '500px'}}>\n            {props.children}\n\n        </div>   \n        \n    );\n};\n\nexport default Scroll;","import React, { Component } from \"react\";\n\nclass ErrorBoundry extends Component{\n    constructor(props){\n        super(props);\n    \n        this.state = {\n            hasError: false\n        }\n    }\n\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if (this.state.hasError){\n            return <h1> Oooops. That is not  good</h1>\n        }\n        else {\n            return this.props.children;\n        }\n    }\n\n\n\n\n}\n\n\n\n\nexport default ErrorBoundry;","import React, {Component} from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport './App.css'\nimport Scroll from '../components/Scroll';\nimport ErrorBoundry from '../components/ErrorBoundry';\n\n\n\nclass App extends Component {\n\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchfield: ''            \n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n        .then(response => {\n            return response.json();\n        })\n        .then(users => this.setState({robots: users}));\n        \n    }\n\n    onSearchChange = (event) => {\n        this.setState({searchfield: event.target.value});       \n    }\n\n    render(){\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLocaleLowerCase().includes(searchfield.toLocaleLowerCase());\n        })\n        if (robots.length === 0){\n            return <h1>Loading... Please wait</h1>\n        } else {\n            return (\n                <div className='tc'>\n                    <h1 className='f1'>RoboFriens</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            );\n        }\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\n//import Card from './Card';\n//import CardList from './CardList';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n//import {robots} from './robots';\n\nReactDOM.render(\n  <App />,\n\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}